--@name ik_lib/Fabrik Ik Base
--@author Mikey
--@shared

local IKBase = class("IKBase")

--[[
    Settings are defined as:
    {
        {len = 40, ang_offset = Angle()}, -- length of that segment
        {len = 40, ang_offset = Angle()},
    }
]]

--[[
    Pole Targets are defined as:
    {
        Vector(1,0,0), -- direction that segment wants to bend towards
        Vector(1,0,0),
    }
]]

function IKBase:initialize(origin, settings)
    self.mid_points = {}
    self.origin = origin
    self.target = self.origin
    self.pole_targets = {}
    self.segments = {}
    self.total_len = 0
    for i = 1, #settings do
        self.segments[i] = {}
        self.segments[i].pos = settings[i].pos or self.origin + Vector(i,0,0)
        self.segments[i].ang = settings[i].ang or Angle()
        self.segments[i].ang_offset = settings[i].ang_offset or Angle()
        self.segments[i].len = settings[i].len
        self.total_len = self.total_len + settings[i].len
    end

    for i = 1, #self.segments do -- generate mid points with rotations, makes it easier to add visuals (holograms, etc.)
        if i == 1 then
            self.mid_points[i] = {
                pos = (self.origin + self.segments[i].pos) / 2,
                ang = Angle(0,0,90) + (self.origin - self.segments[i].pos):getNormalized():getQuaternion((self.target - self.origin):cross(self.pole_targets[i] or Vector(0,0,1)):getNormalized()):getEulerAngle()
            }
            continue
        end
        self.mid_points[i] = {
            pos = (self.segments[i].pos + self.segments[i - 1].pos) / 2,
            ang = Angle(0,0,90) + (self.segments[i].pos - self.segments[i - 1].pos):getNormalized():getQuaternion((self.target - self.origin):cross(self.pole_targets[i] or Vector(0,0,1)):getNormalized()):getEulerAngle()
        }
    end
end

function IKBase:straighten(target, pole_targets) -- straightens out the segments and applies pole targets
    local direction = (target - self.origin):getNormalized()
    direction = direction:getNormalized()
    local new_pos = self.origin
    for i,_ in pairs(self.segments) do -- back ik
        if pole_targets and type(pole_targets) == "table" and pole_targets[i] == Vector() then continue end
        local seg = self.segments[i]
        
        new_pos = new_pos + direction * seg.len * math.min((target - self.origin):getLength() / self.total_len, 1)

        if pole_targets and type(pole_targets) == "table" then
            if pole_targets and pole_targets[i] then
                seg.pos = new_pos + pole_targets[i] * seg.len
            else
                seg.pos = new_pos
            end
        elseif pole_targets then
            seg.pos = new_pos + pole_targets * seg.len
        else
            seg.pos = new_pos
        end
    end
end

function moveSeg(start, target, len)
    local dir = (target - start):getNormalized() * len
    return target - dir
end

function IKBase:setOrigin(pos) -- sets the start of the ik chain
    self.origin = pos
end

function IKBase:getOrigin() -- gets the start of the ik chain
    return self.origin
end

function IKBase:getTarget()
    return self.target
end

function IKBase:getEndPos()
    return self.segments[#self.segments].pos
end

function IKBase:solve(target, pole_targets, iterations) -- solves the arm
    if self.origin == target then return end
    iterations = iterations or 5
    self.target = target
    if not pole_targets or #pole_targets == 0 then
        pole_targets = {}
        for i = 1, #self.segments do
            pole_targets[i] = Vector()
        end
    end
    self.pole_targets = pole_targets

    if pole_targets then
        self:straighten(target, pole_targets)
    end
    
    for iter = 1, iterations do

         -- forward ik, places the last segment at the target and then recursively moves the segments toward its next segment.
        self.segments[#self.segments].pos = target
        for i = #self.segments, 2, -1 do
            local prev_seg = self.segments[i]
            local seg = self.segments[i - 1]
            seg.pos = moveSeg(seg.pos, prev_seg.pos, prev_seg.len)
            seg.ang = ((self.segments[i].pos - self.segments[i - 1].pos):getNormalized():getQuaternion((self.target - self.origin):cross(self.pole_targets ~= nil and (type(self.pole_targets) == "table" and self.pole_targets[i] or self.pole_targets) or Vector(0,0,1)):getNormalized()) * Angle(0,0,90):getQuaternion() * self.segments[i].ang_offset:getQuaternion()):getEulerAngle()
        end

         -- backwards ik, moves the first segment towards the origin and then recursively moves the segments toward its previous segment.
        self.segments[1].pos = moveSeg(self.segments[1].pos, self.origin, self.segments[1].len)
        for i = 2, #self.segments do
            local prev_seg = self.segments[i - 1]
            local seg = self.segments[i]
            seg.pos = moveSeg(seg.pos, prev_seg.pos, seg.len)
        end

        if self.segments[#self.segments].pos:getDistance(target) <= 0.1 then break end
    end
    
    for i = 2, #self.segments do -- generate mid points with rotations, makes it easier to add visuals (holograms, etc.)
        if i == 1 then
            self.mid_points[i] = {
                pos = (self.origin + self.segments[i].pos) / 2,
                ang = ((self.segments[i].pos - self.origin):getNormalized():getQuaternion((self.target - self.origin):cross(self.pole_targets ~= nil and (type(self.pole_targets) == "table" and self.pole_targets[i] or self.pole_targets) or Vector(0,0,1)):getNormalized()) * Angle(0,0,90):getQuaternion() * self.segments[i].ang_offset:getQuaternion()):getEulerAngle()
            }
            continue
        end
        self.mid_points[i] = {
            pos = (self.segments[i].pos + self.segments[i - 1].pos) / 2,
            ang = ((self.segments[i].pos - self.segments[i - 1].pos):getNormalized():getQuaternion((self.target - self.origin):cross(self.pole_targets ~= nil and (type(self.pole_targets) == "table" and self.pole_targets[i] or self.pole_targets) or Vector(0,0,1)):getNormalized()) * Angle(0,0,90):getQuaternion() * self.segments[i].ang_offset:getQuaternion()):getEulerAngle()
        }
    end
end

function IKBase:getJoint(i)
    return self.mid_points[i]
end

function IKBase:getSegment(i)
    return self.segments[i]
end

function IKBase:forSegments(func) -- A helper function for visuals, holograms, etc. These are the poses in between the joints defined as: {pos, ang}
    for k, limb in pairs(self.mid_points) do
        func(k, limb)
    end
end

function IKBase:forJoints(func) -- A helper function for visuals, holograms, etc. These are the joint poses defined as: {pos, ang}
    for k, seg in pairs(self.segments) do
        func(k, seg)
    end
end

return IKBase